/*
ДВУМЕРНЫЕ МАССИВЫ:

string[,] table = new string[2, 3]; 
//Массив строк (таблица из строк).
//string - задается тип данных (по аналогии с одномерными массивами) .
//[,] - указание на то, что будет две размерности (одна размерность - строки; 
    // вторая размерность столбцы).
//table - наименование массива (может быть любым).
//new string[2, 3] - указываем сколько строк и столбцов требуется.

int[,] matrix = new int[5, 8];
//Двумерный числовой массив. 
//Прямоугольная таблица чисел (в математике - матрица).
//new int[5, 8] - указываем сколько строк и столбцов требуется (5 - строки; 8 столбцы).

*/

//==========================================================================================

/*
ПРИМЕР СТРОЧНОГО ДВУМЕРНОГО МАССИВА:

string[,] table = new string[2, 5]; 
//String.Empty - по умолчанию инициализация (вывод) строки происходит пустой, чтобы как-то 
    //заполнить ее, можно добавить символ (см. 33 строку).
//2 строки, 5 столбцов:
    //table[0,0]   table[0,1]  table[0,2]  table[0,3]  table[0,4]
    //table[1,0]   table[1,1]  table[1,2]  table[1,3]  table[1,4] 
table[1, 2] = "слово"; // Чтобы обратиться к нужному элементу, указывается наименование 
    //массива и далее в скобках указываем индексы: 1 - индекс строки, 2 - индекс столбца. 
//Нумерация индексов начинается с нуля.
for (int rows = 0; rows < 2; rows++) //rows - название счетчика строк (название любое)
{
    for (int columns = 0; columns < 5; columns++) //columns - название счетчика столбцов (название любое)
    {
        System.Console.WriteLine($"-{table[rows, columns]}-");
        //Вывод индексов строки и столбца.
        //($"{}") - интерполяция, т.о. обращаемся к массиву table и в скобках 
            //указываем [индекс строки, индекс столбца].
        //-{}- - тире добавлены, чтобы пустые позиции были чем-то заполнены при выводе,
            //иначе покажет пустое поле (символ можно заменить)
    }
}
*/

/*
ПРИМЕР ЧИСЛОВОГО ДВУМЕРНОГО МАССИВА:

int[,] matrix = new int[3, 4]; // Двумерный числовой массив. 
//for (int i = 0; i < 3; i++) // Внешний цикл, перебирающий строки. 1 ВАРИАНТ - указано 
    //точное кол-во строк, дублирующее значение в массиве (...new int[3, ...]).
for (int i = 0; i < matrix.GetLength(0); i++) // Внешний цикл, перебирающий строки. 2 ВАРИАНТ -
    //указано название массива matrix, команда GetLength инициирующая взятие кол-ва строк
    //из массива, (0) - индекс, с какой позиции брать значение (кол-во строк).
{
    //for (int j = 0; j < 4; j++) // Внутренний цикл, перебирающий столбцы. 1 ВАРИАНТ - указано 
        //точное кол-во столбцов, дублирующее значение в массиве (...new int[..., 4]).
    for (int j = 0; j < matrix.GetLength(1); j++) // Внутренний цикл, перебирающий столбцы. 
    //2 ВАРИАНТ - указано название массива matrix, команда GetLength инициирующая взятие 
        //кол-ва столбцов из массива, (1) - индекс, с какой позиции брать значение (кол-во столбцов).
    {
        System.Console.Write($"{matrix[i, j]} "); // WriteLine меняем на Line, иначе все 
            //выведет в один столбец
    }
    System.Console.WriteLine(); // Добавлен принудительный переход на новую строку, чтобы
        //сформировалась таблица (матрица чисел)
}
*/

/*
ПРИМЕР СОЗДАНИЯ МЕТОДА С ВЫЗОВОМ ЧИСЛОВОГО ДВУМЕРНОГО МАССИВА:


// int[,] matrix = new int[3, 4]; //Инициализация массива переносится под метод 

void PrintArray(int[,] matr) //matr - сокращенное название от названия массива, чтобы они 
    //не пересекались (не конфликтовали). Внутри цикла также меняется.
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            System.Console.Write($"{matr[i, j]} ");
        }
        System.Console.WriteLine();
    }
}

int[,] matrix = new int[3, 4];
PrintArray(matrix);
*/

/*
ПРИМЕР СОЗДАНИЯ МЕТОДА С ВЫЗОВОМ ЧИСЛОВОГО ДВУМЕРНОГО МАССИВА  И ЗАПОЛНЕНИЕМ МАТРИЦЫ
СЛУЧАЙНЫМИ ЧИСЛАМИ:
*/
void PrintArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            System.Console.Write($"{matr[i, j]} ");
        }
        System.Console.WriteLine();
    }
}

void FillArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i, j] = new Random().Next(1, 10);
        }
    }
}
int[,] matrix = new int[3, 4];
PrintArray(matrix); //Остается, чтобы убедиться, что выдает матрицу с нулями.
FillArray(matrix); //Запускаем наполнение матрицы случайными числами.
System.Console.WriteLine(); //Делаем отступ, чтобы отделить матрицы.
PrintArray(matrix); //Выводим матрицу, заполненную случайными числами.

